variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  JAVA_HOME: "/usr/lib/jvm/java-21-openjdk-amd64"

before_script:
  - export GRADLE_USER_HOME=`pwd`/backend/gimisangung/.gradle


#stages: 수행할 작업(job)을 실행할 시기를 정의. 즉, 파이프라인의 단계를 정의. 
#작성한 순서대로 실행. build->test->deploy
stages:
  - build
  - test
  - deploy

#build-job: build단계에서 실행되는 작업.
build-job:
  stage: build  #build단계임을 지정
  only:
    - master    #해당 작업은 master 브랜치에서만 실행
  script:       #script섹션에 정의된 명령어들이 순차적으로 실행
    - echo "package application"
    - chmod +x ./backend/gimisangung/gradlew
    - ./backend/gimisangung/gradlew init
    - ./backend/gimisangung/gradlew clean build --stacktrace #Gradle을 사용하여 프로젝트를 클린하고 빌드 수행
      
#unit-test-job: test단계에서 실행되는 작업. build단계가 성공적으로 완료된 후에만 실행
unit-test-job:
  stage: test
  only:
    - master
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - chmod +x ./backend/gimisangung/gradlew
    - ./backend/gimisangung/gradlew test #Gradle을 사용하여 유닛 테스트를 실행
    - echo "Code coverage is 90%"

#deploy-job: deploy단계에서 실행되는 작업. 'test'단계의 모든 작업이 성공적으로 완료된 후에만 실행
deploy-job:
  stage: deploy
  environment:
    name: production                      #배포 환경의 이름을 설정. 
    url: http://your-production-app.com   #배포된 애플리케이션이 접근 가능한 url을 지정
  when: manual #프로덕션에 배포할 때는 수동으로 하도록 설정
  script:
    - echo "Deploying application..."
    - chmod +x ./backend/gimisangung/gradlew
    - ./backend/gimisangung/gradlew deploy
    - echo "Application successfully deployed."
